/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fpir;

import java.awt.Color;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.net.Socket;
import java.util.Scanner;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import java.io.*;
import java.lang.reflect.Array;
import java.util.Vector;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author user
 */
public class a extends javax.swing.JFrame {

    static Socket s;
    static DataInputStream din;
    static DataOutputStream dout;
    static DefaultTableModel model;
    /**
     * Creates new form a
     */
    public a() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sidebar = new javax.swing.JPanel();
        analisis1 = new javax.swing.JLabel();
        nbc = new javax.swing.JLabel();
        navbar = new javax.swing.JPanel();
        judul = new javax.swing.JLabel();
        form_input = new javax.swing.JTextField();
        tombol_simpan = new javax.swing.JButton();
        akhir = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        goods = new javax.swing.JLabel();
        macan = new javax.swing.JLabel();
        singa = new javax.swing.JLabel();
        hates = new javax.swing.JLabel();
        goodhates = new javax.swing.JLabel();
        totalgood = new javax.swing.JLabel();
        totalhate = new javax.swing.JLabel();
        naive = new javax.swing.JLabel();
        hasil_ugood = new javax.swing.JLabel();
        hasil_uhate = new javax.swing.JLabel();
        bigram = new javax.swing.JLabel();
        goods1 = new javax.swing.JLabel();
        macan1 = new javax.swing.JLabel();
        singa1 = new javax.swing.JLabel();
        hates1 = new javax.swing.JLabel();
        goodhates1 = new javax.swing.JLabel();
        totalgood1 = new javax.swing.JLabel();
        totalhate1 = new javax.swing.JLabel();
        hasil_ugood1 = new javax.swing.JLabel();
        hasil_uhate1 = new javax.swing.JLabel();
        unigram = new javax.swing.JLabel();
        fp1 = new javax.swing.JLabel();
        fn1 = new javax.swing.JLabel();
        tp = new javax.swing.JLabel();
        tn = new javax.swing.JLabel();
        Accuracy = new javax.swing.JLabel();
        Precision = new javax.swing.JLabel();
        Recall = new javax.swing.JLabel();
        tprate = new javax.swing.JLabel();
        tnrate = new javax.swing.JLabel();
        fp2 = new javax.swing.JLabel();
        fn2 = new javax.swing.JLabel();
        tp1 = new javax.swing.JLabel();
        tn1 = new javax.swing.JLabel();
        Accuracy1 = new javax.swing.JLabel();
        Precision1 = new javax.swing.JLabel();
        Recall1 = new javax.swing.JLabel();
        tprate1 = new javax.swing.JLabel();
        tnrate1 = new javax.swing.JLabel();
        pake1 = new javax.swing.JLabel();
        pake2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(875, 544));
        setResizable(false);

        sidebar.setBackground(new java.awt.Color(0, 102, 102));
        sidebar.setPreferredSize(new java.awt.Dimension(175, 166));

        analisis1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        analisis1.setForeground(new java.awt.Color(255, 255, 255));
        analisis1.setText("Analisis");
        analisis1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        analisis1.setPreferredSize(new java.awt.Dimension(50, 17));
        analisis1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                analisis1MouseClicked(evt);
            }
        });

        nbc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        nbc.setForeground(new java.awt.Color(255, 255, 255));
        nbc.setText("NBC");
        nbc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        nbc.setPreferredSize(new java.awt.Dimension(50, 17));
        nbc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nbcMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout sidebarLayout = new javax.swing.GroupLayout(sidebar);
        sidebar.setLayout(sidebarLayout);
        sidebarLayout.setHorizontalGroup(
            sidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidebarLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(sidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nbc, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(analisis1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        sidebarLayout.setVerticalGroup(
            sidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidebarLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(analisis1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(nbc, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(492, Short.MAX_VALUE))
        );

        navbar.setBackground(new java.awt.Color(0, 102, 102));
        navbar.setPreferredSize(new java.awt.Dimension(409, 44));

        judul.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        judul.setForeground(new java.awt.Color(255, 255, 255));
        judul.setText("ANALISIS SENTIMEN #HATESPEECH PADA TWITTER");

        javax.swing.GroupLayout navbarLayout = new javax.swing.GroupLayout(navbar);
        navbar.setLayout(navbarLayout);
        navbarLayout.setHorizontalGroup(
            navbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, navbarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(judul)
                .addGap(272, 272, 272))
        );
        navbarLayout.setVerticalGroup(
            navbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(judul, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
        );

        tombol_simpan.setBackground(new java.awt.Color(255, 255, 255));
        tombol_simpan.setText("Simpan");
        tombol_simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombol_simpanActionPerformed(evt);
            }
        });

        akhir.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        goods.setText(" ");

        macan.setText("  ");

        singa.setText("  ");

        hates.setText(" ");
        hates.setPreferredSize(new java.awt.Dimension(49, 14));

        goodhates.setText(" ");
        goodhates.setPreferredSize(new java.awt.Dimension(49, 14));

        totalgood.setText(" ");

        totalhate.setText(" ");

        naive.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        naive.setText("Naive Bayes Classifier");

        hasil_ugood.setText("  ");

        hasil_uhate.setText(" ");

        bigram.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        bigram.setText("bigram");

        goods1.setText(" ");

        macan1.setText("  ");

        singa1.setText("  ");

        hates1.setText(" ");
        hates1.setPreferredSize(new java.awt.Dimension(49, 14));

        goodhates1.setText(" ");
        goodhates1.setPreferredSize(new java.awt.Dimension(49, 14));

        totalgood1.setText(" ");

        totalhate1.setText(" ");

        hasil_ugood1.setText("  ");

        hasil_uhate1.setText(" ");

        unigram.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        unigram.setText("unigram");

        fp1.setText(" ");

        fn1.setText(" ");

        tp.setText(" ");

        tn.setText(" ");

        Accuracy.setText(" ");

        Precision.setText(" ");

        Recall.setText(" ");

        tprate.setText(" ");

        tnrate.setText(" ");

        fp2.setText(" ");

        fn2.setText(" ");

        tp1.setText(" ");

        tn1.setText(" ");

        Accuracy1.setText(" ");

        Precision1.setText(" ");

        Recall1.setText(" ");

        tprate1.setText(" ");

        tnrate1.setText(" ");

        pake1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        pake1.setText(" ");

        pake2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        pake2.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(sidebar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(tombol_simpan)
                                    .addGap(128, 128, 128)
                                    .addComponent(akhir, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(9, 9, 9))
                                .addComponent(form_input, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(totalhate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(totalgood, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(singa, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(goodhates, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                                        .addComponent(hates, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(goods, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(macan, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(hasil_uhate, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(hasil_ugood, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(tp, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(fp1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fn1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(Accuracy, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Precision, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Recall, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tprate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tnrate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(totalhate1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(totalgood1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(singa1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(goodhates1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(hates1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(goods1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(macan1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(hasil_uhate1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(hasil_ugood1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(tp1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(fp2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fn2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tn1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(Accuracy1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Precision1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Recall1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tprate1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tnrate1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(pake1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unigram, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(240, 240, 240)
                        .addComponent(pake2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bigram, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(221, 221, 221)
                        .addComponent(naive)))
                .addContainerGap(36, Short.MAX_VALUE))
            .addComponent(navbar, javax.swing.GroupLayout.DEFAULT_SIZE, 837, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(navbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(sidebar, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(form_input, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tombol_simpan)
                                    .addComponent(akhir, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(bigram)
                                            .addComponent(pake2)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(unigram)
                                        .addComponent(pake1)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(goods, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(hates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(goodhates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(macan)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(singa)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(totalgood)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(hasil_ugood, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(totalhate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(hasil_uhate))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(goods1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(hates1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(goodhates1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(macan1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(singa1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(totalgood1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(hasil_ugood1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(totalhate1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(hasil_uhate1)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(fp1)
                                    .addComponent(fn1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tp)
                                    .addComponent(tn))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Accuracy)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Precision)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Recall)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tprate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tnrate))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(fp2)
                                    .addComponent(fn2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tp1)
                                    .addComponent(tn1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Accuracy1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Precision1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Recall1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tprate1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tnrate1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(naive, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tombol_simpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombol_simpanActionPerformed

        String good ="DATA/unigram_goodspeech.txt"; 
	String hate ="DATA/unigram_hatespeech.txt"; 
	//String input ="DATA/input.txt"; 
	String cgood= null; 
	String chate= null; 
	//String cinput= null; 
        
	String oj ="DATA/hasil_unigram_akhir.txt"; 
	String ok= null; 
        
        String cinput_cv= null;
        String cinput_bn= null;
        
        String goodbigram ="DATA_BIGRAM/bigram_goodspeech.txt"; 
	String hatebigram ="DATA_BIGRAM/bigram_hatespeech.txt"; 
	String cgoodbigram= null; 
	String chatebigram= null; 
        String ojbigram ="DATA_BIGRAM/hasil_bigram_akhir.txt"; 
	String okbigram= null; 
        
        String cinput_cvbigram= null;
        String cinput_bnbigram= null;
        try {
////////////////////////////////////  UNIGRAM - NAIVE BAYES     //////////////////////////////////////
            File inputkosong = new File("DATA/input.txt"); 
            PrintWriter pkalnullkosong = new PrintWriter(new FileWriter(inputkosong, false));
            pkalnullkosong.println();
            
            File inputkosongfp = new File("DATA/false_positif_unigram.txt"); 
            PrintWriter pkalnullkosongfp = new PrintWriter(new FileWriter(inputkosongfp, false));
            pkalnullkosongfp.println();
            
            File inputkosongfn = new File("DATA/false_negatif_unigram.txt"); 
            PrintWriter pkalnullkosongfn = new PrintWriter(new FileWriter(inputkosongfn, false));
            pkalnullkosongfn.println();
            
            File inputkosong_u_g = new File("DATA/angka_unigram.txt"); 
            PrintWriter pkalnullkosong_u_g = new PrintWriter(new FileWriter(inputkosong_u_g, false));
            pkalnullkosong_u_g.println();
            
            File proseskosong1 = new File("DATA/proses_input_unigram_1.txt"); 
            PrintWriter prosesnullkosong1 = new PrintWriter(new FileWriter(proseskosong1, false));
            prosesnullkosong1.println();
            
            File proseskosong2 = new File("DATA/proses_input_unigram_2.txt"); 
            PrintWriter prosesnullkosong2 = new PrintWriter(new FileWriter(proseskosong2, false));
            prosesnullkosong2.println();
            
            File proseskosong3 = new File("DATA/proses_input_unigram_3.txt"); 
            PrintWriter prosesnullkosong3 = new PrintWriter(new FileWriter(proseskosong3, false));
            prosesnullkosong3.println();
            
            File proseskosong4 = new File("DATA/proses_input_unigram_4.txt"); 
            PrintWriter prosesnullkosong4 = new PrintWriter(new FileWriter(proseskosong4, false));
            prosesnullkosong4.println();
             
            File proseskosong5 = new File("DATA/proses_input_unigram_5.txt"); 
            PrintWriter prosesnullkosong5 = new PrintWriter(new FileWriter(proseskosong5, false));
            prosesnullkosong5.println();
            
            File proseskosong6 = new File("DATA/proses_input_unigram_6.txt"); 
            PrintWriter prosesnullkosong6 = new PrintWriter(new FileWriter(proseskosong6, false));
            prosesnullkosong6.println();
            
            File unigram_awal = new File("DATA/hasil_unigram_awal.txt"); 
            PrintWriter prosesnullunigram_awal = new PrintWriter(new FileWriter(unigram_awal, false));
            prosesnullunigram_awal.println();
            
            File hasil_unigram_goodspeech = new File("DATA/hasil_unigram_goodspeech.txt"); 
            PrintWriter prhasil_unigram_goodspeech = new PrintWriter(new FileWriter(hasil_unigram_goodspeech, false));
            prhasil_unigram_goodspeech.println();
            
            File hasil_unigram_hatespeech = new File("DATA/hasil_unigram_hatespeech.txt"); 
            PrintWriter prhasil_unigram_hatespeech = new PrintWriter(new FileWriter(hasil_unigram_hatespeech, false));
            prhasil_unigram_hatespeech.println();
            
            String kalmat; 
            kalmat = form_input.getText(); 
            String kecil9 = kalmat.toLowerCase();
            String simbol9 = kecil9.replaceAll("[^\\p{L}\\s]", "");
            String[] fkal9 = simbol9.split("\\s+");
            for(String kdf : fkal9){
                File datakal9 = new File("DATA/input.txt"); 
                PrintWriter pkal9 = new PrintWriter(new FileWriter(datakal9, true)); 
                pkal9.println(kdf); 
                pkal9.close();
            }
            String input ="DATA/input.txt"; 
            String cinput= null; 
            cinput = new String(Files.readAllBytes(Paths.get(input)));
            String kecil9_i = cinput.toLowerCase(); 
            String simbol9_i = kecil9_i.replaceAll("[^\\p{L}\\s]", "");  //  \\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}
            String[] fkal9_i = simbol9_i.split("\\s+");
            
            cgood = new String(Files.readAllBytes(Paths.get(good)));
            String kecil9_cgood = cgood.toLowerCase(); 
            String[] fkal9_cgood = kecil9_cgood.split("\\s+");
            
            chate = new String(Files.readAllBytes(Paths.get(hate)));
            String kecil9_chate = chate.toLowerCase(); 
            String[] fkal9_chate = kecil9_chate.split("\\s+");
            
            for(String hukal9_g : fkal9_cgood) {    //GAK ISOOOOO
                boolean sapigood = cinput.contains(hukal9_g); 
                    //String hukal9_h = fkal9_chate.toString();
                if (sapigood){ 
                    File datasapigood = new File("DATA/proses_input_unigram_1.txt"); 
                    PrintWriter prsapigood = new PrintWriter(new FileWriter(datasapigood, true)); 
                    prsapigood.println(hukal9_g); 
                    prsapigood.close();
                }
            } //for
                String i2 ="DATA/proses_input_unigram_1.txt"; 
                String ci2= null; 
                ci2 = new String(Files.readAllBytes(Paths.get(i2)));
                String kecil9_ci2 = ci2.toLowerCase(); 
                String[] fkal9_ci2 = kecil9_ci2.split("\\s+");
            for(String hukal9_ci2 : fkal9_i) {    //GAK ISOOOOO
                boolean sapigood_ci2 = ci2.contains(hukal9_ci2); 
                if (sapigood_ci2){ 
                    File datasapigood_ci2 = new File("DATA/proses_input_unigram_2.txt"); 
                    PrintWriter prsapigood_ci2 = new PrintWriter(new FileWriter(datasapigood_ci2, true)); 
                    prsapigood_ci2.println(hukal9_ci2); 
                    prsapigood_ci2.close();
                }
            } //for
            for(String hukal9_h : fkal9_chate) { 
                boolean sapihate = cinput.contains(hukal9_h); 
                if (sapihate){ 
                    File datasapihate = new File("DATA/proses_input_unigram_4.txt"); 
                    PrintWriter prsapihate = new PrintWriter(new FileWriter(datasapihate, true)); 
                    prsapihate.println(hukal9_h); 
                    prsapihate.close();
                }
            } //for
                String i4 ="DATA/proses_input_unigram_4.txt"; 
                String ci4= null; 
                ci4 = new String(Files.readAllBytes(Paths.get(i4)));
                String kecil9_ci4 = ci4.toLowerCase(); 
                String[] fkal9_ci4 = kecil9_ci4.split("\\s+");
            for(String hukal9_ci4 : fkal9_i) {    //GAK ISOOOOO
                boolean sapihate_ci4 = ci4.contains(hukal9_ci4); 
                if (sapihate_ci4){ 
                    File datasapihate_ci4 = new File("DATA/proses_input_unigram_5.txt"); 
                    PrintWriter prsapihate_ci4 = new PrintWriter(new FileWriter(datasapihate_ci4, true)); 
                    prsapihate_ci4.println(hukal9_ci4); 
                    prsapihate_ci4.close();
                }
            } //for
            
                //  good
            	BufferedReader lists_good = new BufferedReader (new FileReader("DATA/proses_input_unigram_2.txt"));
		boolean hasds_good = true;
		String lines_good;
		Set<String> liness_good = new HashSet<String>();
		while ((lines_good = lists_good.readLine()) != null) {
                    if (liness_good.add(lines_good)) {
                        File datasapigood2 = new File("DATA/proses_input_unigram_3.txt"); 
                        PrintWriter prsapigood2 = new PrintWriter(new FileWriter(datasapigood2, true)); 
                        prsapigood2.println(lines_good); 
                        prsapigood2.close();
                           // durung iso nge print
                        String textgood = "goodspeech"; 
                        File hasil_unigram_awal = new File("DATA/hasil_unigram_awal.txt"); 
                        PrintWriter prtextgood = new PrintWriter(new FileWriter(hasil_unigram_awal, true)); 
                        prtextgood.println(textgood);
                        prtextgood.close();

                        File hasil_macan = new File("DATA/hasil_unigram_goodspeech.txt"); 
                        PrintWriter hasil_macangood = new PrintWriter(new FileWriter(hasil_macan, true)); 
                        hasil_macangood.println(textgood);
                        hasil_macangood.close();
                    }
		}//while
           
                
                 //  hate
            	BufferedReader lists_hate = new BufferedReader (new FileReader("DATA/proses_input_unigram_5.txt"));
		boolean hasds_hate = true;
		String lines_hate;
		Set<String> liness_hate = new HashSet<String>();
		while ((lines_hate = lists_hate.readLine()) != null) {
                    if (liness_hate.add(lines_hate)) {
                        File datasapihate2 = new File("DATA/proses_input_unigram_6.txt"); 
                        PrintWriter prsapihate2 = new PrintWriter(new FileWriter(datasapihate2, true)); 
                        prsapihate2.println(lines_hate); 
                        prsapihate2.close();
                           // durung iso nge print
                        String texthate = "hatespeech"; 
                        File hasil_unigram_awal = new File("DATA/hasil_unigram_awal.txt"); 
                        PrintWriter prtexthate = new PrintWriter(new FileWriter(hasil_unigram_awal, true)); 
                        prtexthate.println(texthate);
                        prtexthate.close();

                        File hasil_macan = new File("DATA/hasil_unigram_hatespeech.txt"); 
                        PrintWriter hasil_macanhate = new PrintWriter(new FileWriter(hasil_macan, true)); 
                        hasil_macanhate.println(texthate);
                        hasil_macanhate.close();
                    }
                    //liness_good.add(lines_good); 
		}
            
 ///////////////////////////////    pembuatan FP dan FN dari perbandingan proses input 3 dan 6
 ////////////////// 3 = goodspeech   6 = hatespeech
            
                String fp ="DATA/proses_input_unigram_3.txt"; 
                String cfp= null; 
                cfp = new String(Files.readAllBytes(Paths.get(fp)));
                String kecil9_fp = cfp.toLowerCase(); 
                String[] fkal9_fp = kecil9_fp.split("\\s+");
                String fn ="DATA/proses_input_unigram_6.txt"; 
                String cfn= null; 
                cfn = new String(Files.readAllBytes(Paths.get(fn)));
                String kecil9_fn = cfn.toLowerCase(); 
                String[] fkal9_fn = kecil9_fn.split("\\s+");
                
            for(String hukal9_fp : fkal9_fp) {    //GAK ISOOOOO
                boolean sapigood_fp = cfn.contains(hukal9_fp); 
                if (sapigood_fp){ 
                    File datasapigood_fp = new File("DATA/false_positif_unigram.txt"); 
                    PrintWriter prsapigood_fp = new PrintWriter(new FileWriter(datasapigood_fp, true)); 
                    prsapigood_fp.println(hukal9_fp); 
                    prsapigood_fp.close();
                }
            } //for
            for(String hukal9_fn : fkal9_fn) {    //GAK ISOOOOO
                boolean sapihate_fn = cfp.contains(hukal9_fn); 
                if (sapihate_fn){ 
                    File datasapihate_fn = new File("DATA/false_negatif_unigram.txt"); 
                    PrintWriter prsapihate_fn = new PrintWriter(new FileWriter(datasapihate_fn, true)); 
                    prsapihate_fn.println(hukal9_fn); 
                    prsapihate_fn.close();
                }
            } //for
                



 ///////////////////////////////    START PER-HITUNG-AN NAIVE BAYES CLASSIFIER        
            String olkjnj ="DATA/input.txt"; 
            String oijuiou = null; 
            oijuiou = new String(Files.readAllBytes(Paths.get(olkjnj)));
            String[] ukjmyhtrf = oijuiou.split("\\s+"); // bawah
            int esrfwe  = ukjmyhtrf.length; 
            int ewrwe = 0;
            if(esrfwe != ewrwe){
                unigram.setVisible(true);
                naive.setVisible(true);
                bigram.setVisible(true);
                String jgood ="DATA/unigram_goodspeech.txt"; 
                String pjgood= null; 
                pjgood = new String(Files.readAllBytes(Paths.get(jgood)));
                String[] opjgood = pjgood.split("\\s+"); // bawah
                int Barisjgood  = opjgood.length; 
                String jumlahBarisjgood  = Integer.toString(Barisjgood);
                goods.setText("Data Goodspeech = " + jumlahBarisjgood);

                String jhate ="DATA/unigram_hatespeech.txt"; 
                String pjhate= null; 
                pjhate = new String(Files.readAllBytes(Paths.get(jhate)));
                String[] opjhate = pjhate.split("\\s+"); // bawah
                int Barisjhate  = opjhate.length; 
                String jumlahBarisjhate  = Integer.toString(Barisjhate);
                hates.setText("Data Hatespeech = " + jumlahBarisjhate);

                int data_goodhate = Barisjgood + Barisjhate;
                String jumlahdata_goodhate  = Integer.toString(data_goodhate);
                goodhates.setText("Data Total = " + jumlahdata_goodhate);

               // HITUNG JUMLAH INPUT GOODSPEECH
                String macan1 ="DATA/hasil_unigram_goodspeech.txt"; 
                String macan2 = null; 
                macan2 = new String(Files.readAllBytes(Paths.get(macan1)));
                String[] macan3 = macan2.split("\\s+"); // bawah
                int macan4  = macan3.length; 
                String macan5  = Integer.toString(macan4);
                String kfmd ="goodspeech";
                boolean lkmkl = kfmd.contains(macan2); 
                if(!lkmkl){
                    macan.setText("Goodspeech Terdeteksi = " + macan5);
                    tp.setText("TP = " + macan5);
                }else {
                    macan.setText("Goodspeech Terdeteksi = 0");
                    tp.setText("TP = 0" );
                }
                 // HITUNG JUMLAH INPUT HATESPEECH
                String singa1 ="DATA/hasil_unigram_hatespeech.txt"; 
                String singa2 = null; 
                singa2 = new String(Files.readAllBytes(Paths.get(singa1)));
                String[] singa3 = singa2.split("\\s+"); // bawah
                int singa4  = singa3.length; 
                String singa5  = Integer.toString(singa4);
                String kfmdsinga ="hatespeech";
                boolean lkmklsinga = kfmdsinga.contains(singa2); // jika pake ini maka akibatnya kata hatespeech tidak akan terdeteksi
                if(!lkmklsinga){
                    singa.setText("Hatespeech Terdeteksi = " + singa5);
                    tn.setText("TN = " + singa5);
                }else {
                    singa.setText("Hatespeech Terdeteksi = 0");
                    tn.setText("TN = 0");
                }
                double nbcgood1 = Barisjgood * macan4;
                double nbcgood2 = data_goodhate * Barisjgood;
                double nbcgood3 = nbcgood1 / nbcgood2;
                //String unigram_nbcgood  = Double.toString(nbcgood3);
                String u_nbcgood = String.format("%.10f",nbcgood3);
                if(!lkmkl){
                    totalgood.setText("Hasil Goodspeech = " + jumlahBarisjgood +" "+"/"+" "+ jumlahdata_goodhate +" "+"x"+" "+ macan5 +" "+"/"+" "+ jumlahBarisjgood );
                    hasil_ugood.setText("="+" "+ u_nbcgood);
                }else {
                    totalgood.setText("Hasil Goodspeech = ");
                    hasil_ugood.setText("="+" " );
                }
                double nbchate1 = Barisjhate * singa4;
                double nbchate2 = data_goodhate * Barisjhate;
                double nbchate3 = nbchate1 / nbchate2;
                //String unigram_nbchate  = Double.toString(nbchate3);
                String u_nbchate = String.format("%.10f",nbchate3);
                if(!lkmklsinga){
                    totalhate.setText("Hasil Hatespeech = " + jumlahBarisjhate +" "+"/"+" "+ jumlahdata_goodhate +" "+"x"+" "+ singa5 +" "+"/"+" "+ jumlahBarisjhate ); 
                    hasil_uhate.setText("="+" "+ u_nbchate);
                }else {
                    totalhate.setText("Hasil Hatespeech = ");
                    hasil_uhate.setText("="+" " );
                }
                

                    String cd ="DATA/hasil_unigram_awal.txt"; 
                    String cd2 = null; 
                    cd2 = new String(Files.readAllBytes(Paths.get(cd)));
                    String[] cd3 = cd2.split("\\s+"); // bawah
                    int cd4  = cd3.length; 
                    String cd5  = Integer.toString(cd4);
                    int cd1 = 1;

                 // HASIL PERBANINGAN
                 if(nbcgood3 > nbchate3) {
                    File dataindgood = new File("DATA/hasil_unigram_akhir.txt"); 
                    PrintWriter prinddataindgood = new PrintWriter(new FileWriter(dataindgood, false)); 
                    prinddataindgood.println("Goodspeech");
                    prinddataindgood.close();  
                 } else if(nbchate3 > nbcgood3) {
                    File dataindhate = new File("DATA/hasil_unigram_akhir.txt"); 
                    PrintWriter prinddataindhate = new PrintWriter(new FileWriter(dataindhate, false)); 
                    prinddataindhate.println("Hatespeech");
                    prinddataindhate.close();  
                 }else if(cd4 == cd1){ // jika hanya 1 kata yg di input
                    String cd6 ="DATA/hasil_unigram_awal.txt"; 
                    String cd7 = null; 
                    cd7 = new String(Files.readAllBytes(Paths.get(cd6)));
                    File cd8 = new File("DATA/hasil_unigram_akhir.txt"); 
                    PrintWriter cd9 = new PrintWriter(new FileWriter(cd8, false)); 
                    cd9.println(cd7);
                    cd9.close(); 
                 }else if(nbcgood3 == nbchate3) { // jika hasil nya imbang
                    File dataindno = new File("DATA/hasil_unigram_akhir.txt"); 
                    PrintWriter prinddataindno = new PrintWriter(new FileWriter(dataindno, false)); 
                    prinddataindno.println("Tidak ada hasil");
                    prinddataindno.close();  
                 }
                 double u_g = nbcgood3 + nbchate3;
                 File u_g_file = new File("DATA/angka_unigram.txt"); 
                    PrintWriter pr_u_g = new PrintWriter(new FileWriter(u_g_file, false)); 
                    pr_u_g.println(u_g);
                    pr_u_g.close();  
                    //ok = new String(Files.readAllBytes(Paths.get(oj)));
                    //akhir.setText(ok);
                
                 
                String fp_length ="DATA/false_positif_unigram.txt"; 
                String cfp_length= null; 
                cfp_length = new String(Files.readAllBytes(Paths.get(fp_length)));
                String kecil9_fp_length = cfp_length.toLowerCase(); 
                String[] fkal9_fp_length = kecil9_fp_length.split("\\s+");    
                String fn_length ="DATA/false_negatif_unigram.txt"; 
                String cfn_length= null; 
                cfn_length = new String(Files.readAllBytes(Paths.get(fn_length)));
                String kecil9_fn_length = cfn_length.toLowerCase(); 
                String[] fkal9_fn_length = kecil9_fn_length.split("\\s+");
                
                        int zps = 0;
                        int B_fp_length = fkal9_fp_length.length; 
                        String j_fp_length  = Integer.toString(B_fp_length);
                        int B_fn_length = fkal9_fn_length.length; 
                        String j_fn_length  = Integer.toString(B_fn_length);
                        //fn1.setText("FN = " + j_fn_length);
                    if(cfp_length.equals("") || cfn_length.equals("")){
                         fp1.setText("FP = " + zps);
                        fn1.setText("FN = " + zps);
                        double akurasi1 = macan4 + singa4; 
                        double akurasi2 = macan4 + zps + zps + singa4;
                        double akurasi3 = akurasi1 / akurasi2;
                        double akurasi4 = akurasi3 * 100;
                        String akurasi5 = String.format("%.1f",akurasi4);
                        Accuracy.setText("Accuracy = " + "" +akurasi5 + "%");
                        double precission1 = macan4 + zps;
                        double precission2 = macan4 / precission1;
                        double precission3 = precission2 * 100;
                        String precission4 = String.format("%.1f",precission3);
                        Precision.setText("Precission = " + "" +precission4 + "%");
                        double recall1 = macan4 + zps;
                        double recall2 = macan4 / recall1;
                        double recall3 = recall2 * 100;
                        String recall4 = String.format("%.1f",recall3);
                        Recall.setText("Recall = " + "" + recall4 + "%");
                        double tprate1 = macan4 + zps;
                        double tprate2 = macan4 / tprate1;
                        double tprate3 = tprate2 * 100;
                        String tprate4 = String.format("%.1f",tprate3);
                        tprate.setText("TP Rate = " + "" + tprate4 + "%");
                        double tnrate1 = singa4 + zps;
                        double tnrate2 = singa4 / tnrate1;
                        double tnrate3 = tnrate2 * 100;
                        String tnrate4 = String.format("%.1f",tnrate3);
                        tnrate.setText("TN Rate= " + "" + tnrate4 + "%");
                            double hab01 = akurasi4 + precission3 + recall3 + tprate3 + tnrate3;
                            File hab01_file = new File("DATA/ratarata_unigram.txt"); 
                            PrintWriter pr_hab01 = new PrintWriter(new FileWriter(hab01_file, false)); 
                            pr_hab01.println(hab01);
                            pr_hab01.close();
                    }else{
                        fp1.setText("FP = " + j_fp_length);
                        fn1.setText("FN = " + j_fn_length);
                        double akurasi1 = macan4 + singa4; 
                        double akurasi2 = macan4 + B_fp_length + B_fn_length + singa4;
                        double akurasi3 = akurasi1 / akurasi2;
                        double akurasi4 = akurasi3 * 100;
                        String akurasi5 = String.format("%.1f",akurasi4);
                        Accuracy.setText("Accuracy = " + "" +akurasi5 + "%");
                        double precission1 = macan4 + B_fp_length;
                        double precission2 = macan4 / precission1;
                        double precission3 = precission2 * 100;
                        String precission4 = String.format("%.1f",precission3);
                        Precision.setText("Precission = " + "" +precission4 + "%");
                        double recall1 = macan4 + B_fn_length;
                        double recall2 = macan4 / recall1;
                        double recall3 = recall2 * 100;
                        String recall4 = String.format("%.1f",recall3);
                        Recall.setText("Recall = " + "" + recall4 + "%");
                        double tprate1 = macan4 + B_fn_length;
                        double tprate2 = macan4 / tprate1;
                        double tprate3 = tprate2 * 100;
                        String tprate4 = String.format("%.1f",tprate3);
                        tprate.setText("TP Rate = " + "" + tprate4 + "%");
                        double tnrate1 = singa4 + B_fp_length;
                        double tnrate2 = singa4 / tnrate1;
                        double tnrate3 = tnrate2 * 100;
                        String tnrate4 = String.format("%.1f",tnrate3);
                        tnrate.setText("TN Rate= " + "" + tnrate4 + "%");
                            double hab01 = akurasi4 + precission3 + recall3 + tprate3 + tnrate3;
                            File hab01_file = new File("DATA/ratarata_unigram.txt"); 
                            PrintWriter pr_hab01 = new PrintWriter(new FileWriter(hab01_file, false)); 
                            pr_hab01.println(hab01);
                            pr_hab01.close();
                    }
                   // } // dalam proses perhitungan-nya print kosongan masih dihitung (length) 1
                    
                    
                    
                    //  jika TP dan TN nol maka di print kosongan
                    //if(macan2.contains("") && singa2.contains("")){
                        //Accuracy.setText("Accuracy = ");
                        //Precision.setText("Precission = ");
                        //Recall.setText("Recall = ");
                        //tprate.setText("TP Rate = ");
                      //  tnrate.setText("TN Rate = ");
                    //}
                    
            
               
                    

            }//if unigram
            
            
            
            
            
////////////////////////////////////     BIGRAM - NAIVE BAYES     //////////////////////////////////////            
///////////////////////////////////                              /////////////////////////////////////// 
            File proseskosong1bigramfp = new File("DATA_BIGRAM/false_positif_bigram.txt"); 
            PrintWriter prosesnullkosong1bigramfp = new PrintWriter(new FileWriter(proseskosong1bigramfp, false));
            prosesnullkosong1bigramfp.println();
            
            File proseskosong1bigramfn = new File("DATA_BIGRAM/false_negatif_bigram.txt"); 
            PrintWriter prosesnullkosong1bigramfn = new PrintWriter(new FileWriter(proseskosong1bigramfn, false));
            prosesnullkosong1bigramfn.println();
     
            File proseskosong1bigram = new File("DATA_BIGRAM/proses_input_bigram_1.txt"); 
            PrintWriter prosesnullkosong1bigram = new PrintWriter(new FileWriter(proseskosong1bigram, false));
            prosesnullkosong1bigram.println();
            
            File proseskosong2bigram = new File("DATA_BIGRAM/proses_input_bigram_2.txt"); 
            PrintWriter prosesnullkosong2bigram = new PrintWriter(new FileWriter(proseskosong2bigram, false));
            prosesnullkosong2bigram.println();
            
            File proseskosong3bigram = new File("DATA_BIGRAM/proses_input_bigram_3.txt"); 
            PrintWriter prosesnullkosong3bigram = new PrintWriter(new FileWriter(proseskosong3bigram, false));
            prosesnullkosong3bigram.println();
            
            File proseskosong4bigram = new File("DATA_BIGRAM/proses_input_bigram_4.txt"); 
            PrintWriter prosesnullkosong4bigram = new PrintWriter(new FileWriter(proseskosong4bigram, false));
            prosesnullkosong4bigram.println();
             
            File proseskosong5bigram = new File("DATA_BIGRAM/proses_input_bigram_5.txt"); 
            PrintWriter prosesnullkosong5bigram = new PrintWriter(new FileWriter(proseskosong5bigram, false));
            prosesnullkosong5bigram.println();
            
            File proseskosong6bigram = new File("DATA_BIGRAM/proses_input_bigram_6.txt"); 
            PrintWriter prosesnullkosong6bigram = new PrintWriter(new FileWriter(proseskosong6bigram, false));
            prosesnullkosong6bigram.println();
            
            File unigram_awalbigram = new File("DATA_BIGRAM/hasil_bigram_awal.txt"); 
            PrintWriter prosesnullunigram_awalbigram = new PrintWriter(new FileWriter(unigram_awalbigram, false));
            prosesnullunigram_awalbigram.println();
            
            File hasil_unigram_goodspeechbigram = new File("DATA_BIGRAM/hasil_bigram_goodspeech.txt"); 
            PrintWriter prhasil_unigram_goodspeechbigram = new PrintWriter(new FileWriter(hasil_unigram_goodspeechbigram, false));
            prhasil_unigram_goodspeechbigram.println();
            
            File hasil_unigram_hatespeechbigram = new File("DATA_BIGRAM/hasil_bigram_hatespeech.txt"); 
            PrintWriter prhasil_unigram_hatespeechbigram = new PrintWriter(new FileWriter(hasil_unigram_hatespeechbigram, false));
            prhasil_unigram_hatespeechbigram.println();
            

            File binull = new File("DATA_BIGRAM/input_bigram_1.txt"); 
            PrintWriter pbinull = new PrintWriter(new FileWriter(binull, false)); 
            pbinull.println();
            File bbinull02 = new File("DATA_BIGRAM/input_bigram_2.txt"); 
            PrintWriter bpbinull02 = new PrintWriter(new FileWriter(bbinull02, false)); 
            bpbinull02.println();
            File bbinull0 = new File("DATA_BIGRAM/input_bigram_3.txt"); 
            PrintWriter bpbinull0 = new PrintWriter(new FileWriter(bbinull0, false)); 
            bpbinull0.println();
            File bbinull = new File("DATA_BIGRAM/input_bigram_4.txt"); 
            PrintWriter bpbinull = new PrintWriter(new FileWriter(bbinull, false)); 
            bpbinull.println();
            File bbinull05 = new File("DATA_BIGRAM/input_bigram.txt"); 
            PrintWriter bpbinull05 = new PrintWriter(new FileWriter(bbinull05, false)); 
            bpbinull05.println();
            
            //1
            BufferedReader reader1 = new BufferedReader(new FileReader("DATA/input.txt"));
            String satu = reader1.readLine();
            File bi00 = new File("DATA_BIGRAM/input_bigram_1.txt"); 
            PrintWriter pbi00 = new PrintWriter(new FileWriter(bi00, true)); 
            pbi00.println(satu);
            pbi00.close();
            
            //2
            String be1 ="DATA_BIGRAM/input_bigram_1.txt"; 
            String bes1= null; 
            bes1 = new String(Files.readAllBytes(Paths.get(be1)));
            for(String yab : fkal9_i){
                boolean ajax = bes1.contains(yab);
                if(!ajax){
                    File bi0 = new File("DATA_BIGRAM/input_bigram_2.txt"); 
                    PrintWriter pbi0 = new PrintWriter(new FileWriter(bi0, true)); 
                    pbi0.println(yab);
                    pbi0.close();
                }
            }
            
            //3
            String be12 ="DATA_BIGRAM/input_bigram_2.txt"; 
            String bes12= null; 
            bes12 = new String(Files.readAllBytes(Paths.get(be12)));
            String[] besbawah2 = bes12.split("\\s+"); // bawah
            for(String bigood2 : besbawah2) {
                        File bi2 = new File("DATA_BIGRAM/input_bigram_3.txt"); 
                        PrintWriter pbi2 = new PrintWriter(new FileWriter(bi2, true)); 
                        pbi2.println(bigood2);
                        pbi2.println(bigood2);
                        pbi2.close();
            }
            
            //4
            String be124 ="DATA_BIGRAM/input_bigram_1.txt"; 
            String bes124= null; 
            bes124 = new String(Files.readAllBytes(Paths.get(be124)));
            String be1243 ="DATA_BIGRAM/input_bigram_3.txt"; 
            String bes1243= null; 
            bes1243 = new String(Files.readAllBytes(Paths.get(be1243)));
            File bi004 = new File("DATA_BIGRAM/input_bigram_4.txt"); 
            PrintWriter pbi004 = new PrintWriter(new FileWriter(bi004, true)); 
            pbi004.print(bes124);
            pbi004.println(bes1243);
            pbi004.close();
            
            //5
            BufferedReader reader = new BufferedReader(new FileReader("DATA_BIGRAM/input_bigram_4.txt"));
            String currentLine;
            String[] a;
            String[] b;
            while((currentLine = reader.readLine()) != null) {
                a = currentLine.split(",");
                b = reader.readLine().split(",");
                File bi2 = new File("DATA_BIGRAM/input_bigram.txt"); 
                PrintWriter pbi2 = new PrintWriter(new FileWriter(bi2, true)); 
                //pbi2.println(a[0] + " " + b[0]); //di gabung tanpa spasi
                pbi2.println(a[0] + b[0]);
                pbi2.close();
            }//while
            
            String inputbigram ="DATA_BIGRAM/input_bigram.txt"; 
            String cinputbigram= null; 
            cinputbigram = new String(Files.readAllBytes(Paths.get(inputbigram)));
            String kecil9_ibigram = cinputbigram.toLowerCase(); 
            String[] fkal9_ibigram = kecil9_ibigram.split("\\s+");
            //String[] fkal9_ibigram = new String[] {kecil9_ibigram};
            
            cgoodbigram = new String(Files.readAllBytes(Paths.get(goodbigram)));
            String kecil9_cgoodbigram = cgoodbigram.toLowerCase(); 
            String[] fkal9_cgoodbigram = kecil9_cgoodbigram.split("\\s+");
            
            chatebigram = new String(Files.readAllBytes(Paths.get(hatebigram)));
            String kecil9_chatebigram = chatebigram.toLowerCase(); 
            String[] fkal9_chatebigram = kecil9_chatebigram.split("\\s+");
            
            for(String hukal9_gbigram : fkal9_cgoodbigram) {    //GAK ISOOOOO
                boolean sapigoodbigram = cinputbigram.contains(hukal9_gbigram);
                if (sapigoodbigram){ 
                    File datasapigoodbigram = new File("DATA_BIGRAM/proses_input_bigram_1.txt"); 
                    PrintWriter prsapigoodbigram = new PrintWriter(new FileWriter(datasapigoodbigram, true)); 
                    prsapigoodbigram.println(hukal9_gbigram); 
                    prsapigoodbigram.close();
                }
            }
                String i2bigram ="DATA_BIGRAM/proses_input_bigram_1.txt"; 
                String ci2bigram= null; 
                ci2bigram = new String(Files.readAllBytes(Paths.get(i2bigram)));
                String kecil9_ci2bigram = ci2bigram.toLowerCase(); 
                String[] fkal9_ci2bigram = kecil9_ci2bigram.split("\\s+");
            for(String hukal9_ci2bigram : fkal9_ibigram) {    //GAK ISOOOOO
                boolean sapigood_ci2bigram = ci2bigram.contains(hukal9_ci2bigram); 
                if (sapigood_ci2bigram){ 
                    File datasapigood_ci2bigram = new File("DATA_BIGRAM/proses_input_bigram_2.txt"); 
                    PrintWriter prsapigood_ci2bigram = new PrintWriter(new FileWriter(datasapigood_ci2bigram, true)); 
                    prsapigood_ci2bigram.println(hukal9_ci2bigram); 
                    prsapigood_ci2bigram.close();
                }
            } 
            for(String hukal9_hbigram : fkal9_chatebigram) { 
                boolean sapihatebigram = cinputbigram.contains(hukal9_hbigram); 
                if (sapihatebigram){ 
                    File datasapihatebigram = new File("DATA_BIGRAM/proses_input_bigram_4.txt"); 
                    PrintWriter prsapihatebigram = new PrintWriter(new FileWriter(datasapihatebigram, true)); 
                    prsapihatebigram.println(hukal9_hbigram); 
                    prsapihatebigram.close();
                }
            } //for
                String i4bigram ="DATA_BIGRAM/proses_input_bigram_4.txt"; 
                String ci4bigram= null; 
                ci4bigram = new String(Files.readAllBytes(Paths.get(i4bigram)));
                String kecil9_ci4bigram = ci4bigram.toLowerCase(); 
                String[] fkal9_ci4bigram = kecil9_ci4bigram.split("\\s+");
            for(String hukal9_ci4bigram : fkal9_ibigram) {    //GAK ISOOOOO
                boolean sapihate_ci4bigram = ci4bigram.contains(hukal9_ci4bigram); 
                if (sapihate_ci4bigram){ 
                    File datasapihate_ci4bigram = new File("DATA_BIGRAM/proses_input_bigram_5.txt"); 
                    PrintWriter prsapihate_ci4bigram = new PrintWriter(new FileWriter(datasapihate_ci4bigram, true)); 
                    prsapihate_ci4bigram.println(hukal9_ci4bigram); 
                    prsapihate_ci4bigram.close();
                }
            } 
            
                //  good
            	BufferedReader lists_goodbigram = new BufferedReader (new FileReader("DATA_BIGRAM/proses_input_bigram_2.txt"));
		boolean hasds_goodbigram = true;
		String lines_goodbigram;
		Set<String> liness_goodbigram = new HashSet<String>();
		while ((lines_goodbigram = lists_goodbigram.readLine()) != null) {
                    if (liness_goodbigram.add(lines_goodbigram)) {
                        File datasapigood2bigram = new File("DATA_BIGRAM/proses_input_bigram_3.txt"); 
                        PrintWriter prsapigood2bigram = new PrintWriter(new FileWriter(datasapigood2bigram, true)); 
                        prsapigood2bigram.println(lines_goodbigram); 
                        prsapigood2bigram.close();
                           // durung iso nge print
                        String textgoodbigram = "goodspeech"; 
                        File hasil_unigram_awalbigram = new File("DATA_BIGRAM/hasil_bigram_awal.txt"); 
                        PrintWriter prtextgoodbigram = new PrintWriter(new FileWriter(hasil_unigram_awalbigram, true)); 
                        prtextgoodbigram.println(textgoodbigram);
                        prtextgoodbigram.close();

                        File hasil_macanbigram = new File("DATA_BIGRAM/hasil_bigram_goodspeech.txt"); 
                        PrintWriter hasil_macangoodbigram = new PrintWriter(new FileWriter(hasil_macanbigram, true)); 
                        hasil_macangoodbigram.println(textgoodbigram);
                        hasil_macangoodbigram.close();
                    }
		}//while
           
                
                 //  hate
            	BufferedReader lists_hatebigram = new BufferedReader (new FileReader("DATA_BIGRAM/proses_input_bigram_5.txt"));
		boolean hasds_hatebigram = true;
		String lines_hatebigram;
		Set<String> liness_hatebigram = new HashSet<String>();
		while ((lines_hatebigram = lists_hatebigram.readLine()) != null) {
                    if (liness_hatebigram.add(lines_hatebigram)) {
                        File datasapihate2bigram = new File("DATA_BIGRAM/proses_input_bigram_6.txt"); 
                        PrintWriter prsapihate2bigram = new PrintWriter(new FileWriter(datasapihate2bigram, true)); 
                        prsapihate2bigram.println(lines_hatebigram); 
                        prsapihate2bigram.close();
                           // durung iso nge print
                        String texthatebigram = "hatespeech"; 
                        File hasil_unigram_awalbigram = new File("DATA_BIGRAM/hasil_bigram_awal.txt"); 
                        PrintWriter prtexthatebigram = new PrintWriter(new FileWriter(hasil_unigram_awalbigram, true)); 
                        prtexthatebigram.println(texthatebigram);
                        prtexthatebigram.close();

                        File hasil_macanbigram = new File("DATA_BIGRAM/hasil_bigram_hatespeech.txt"); 
                        PrintWriter hasil_macanhatebigram = new PrintWriter(new FileWriter(hasil_macanbigram, true)); 
                        hasil_macanhatebigram.println(texthatebigram);
                        hasil_macanhatebigram.close();
                    }; 
		}
            
                
                
                ///////////////////////////////    pembuatan FP dan FN dari perbandingan proses input 3 dan 6
 ////////////////// 3 = goodspeech   6 = hatespeech
            
                String fpbigram ="DATA_BIGRAM/proses_input_bigram_3.txt"; 
                String cfpbigram= null; 
                cfpbigram = new String(Files.readAllBytes(Paths.get(fpbigram)));
                String kecil9_fpbigram = cfpbigram.toLowerCase(); 
                String[] fkal9_fpbigram = kecil9_fpbigram.split("\\s+");
                String fnbigram ="DATA_BIGRAM/proses_input_bigram_6.txt"; 
                String cfnbigram= null; 
                cfnbigram = new String(Files.readAllBytes(Paths.get(fnbigram)));
                String kecil9_fnbigram = cfnbigram.toLowerCase(); 
                String[] fkal9_fnbigram = kecil9_fnbigram.split("\\s+");
                
            for(String hukal9_fpbigram : fkal9_fpbigram) {    //GAK ISOOOOO
                boolean sapigood_fpbigram = cfnbigram.contains(hukal9_fpbigram); 
                if (sapigood_fpbigram){ 
                    File datasapigood_fpbigram = new File("DATA_BIGRAM/false_positif_bigram.txt"); 
                    PrintWriter prsapigood_fpbigram = new PrintWriter(new FileWriter(datasapigood_fpbigram, true)); 
                    prsapigood_fpbigram.println(hukal9_fpbigram); 
                    prsapigood_fpbigram.close();
                }
            } //for
            for(String hukal9_fnbigram : fkal9_fnbigram) {    //GAK ISOOOOO
                boolean sapihate_fnbigram = cfpbigram.contains(hukal9_fnbigram); 
                if (sapihate_fnbigram){ 
                    File datasapihate_fnbigram = new File("DATA_BIGRAM/false_negatif_bigram.txt"); 
                    PrintWriter prsapihate_fnbigram = new PrintWriter(new FileWriter(datasapihate_fnbigram, true)); 
                    prsapihate_fnbigram.println(hukal9_fnbigram); 
                    prsapihate_fnbigram.close();
                }
            } //for
                
                
                
                
                

 ///////////////////////////////    START PER-HITUNG-AN NAIVE BAYES CLASSIFIER 
            String olkjnjbigram ="DATA_BIGRAM/input_bigram.txt"; 
            String oijuioubigram = null; 
            oijuioubigram = new String(Files.readAllBytes(Paths.get(olkjnjbigram)));
            String[] ukjmyhtrfbigram = oijuioubigram.split("\\s+");
            int esrfwebigram  = ukjmyhtrfbigram.length; 
            int ewrwebigram = 0;
            if(esrfwebigram != ewrwebigram){
                unigram.setVisible(true);
                naive.setVisible(true);
                bigram.setVisible(true);
                String jgoodbigram ="DATA_BIGRAM/bigram_goodspeech.txt"; 
                String pjgoodbigram= null; 
                pjgoodbigram = new String(Files.readAllBytes(Paths.get(jgoodbigram)));
                String[] opjgoodbigram = pjgoodbigram.split("\\s+");
                int Barisjgoodbigram  = opjgoodbigram.length; 
                String jumlahBarisjgoodbigram  = Integer.toString(Barisjgoodbigram);
                goods1.setText("Data Goodspeech = " + jumlahBarisjgoodbigram);

                String jhatebigram ="DATA_BIGRAM/bigram_hatespeech.txt"; 
                String pjhatebigram= null; 
                pjhatebigram = new String(Files.readAllBytes(Paths.get(jhatebigram)));
                String[] opjhatebigram = pjhatebigram.split("\\s+");
                int Barisjhatebigram  = opjhatebigram.length; 
                String jumlahBarisjhatebigram  = Integer.toString(Barisjhatebigram);
                hates1.setText("Data Hatespeech = " + jumlahBarisjhatebigram);

                int data_goodhatebigram = Barisjgoodbigram + Barisjhatebigram;
                String jumlahdata_goodhatebigram  = Integer.toString(data_goodhatebigram);
                goodhates1.setText("Data Total = " + jumlahdata_goodhatebigram);

               // HITUNG JUMLAH INPUT GOODSPEECH
                String macan1bigram ="DATA_BIGRAM/hasil_bigram_goodspeech.txt"; 
                String macan2bigram = null; 
                macan2bigram = new String(Files.readAllBytes(Paths.get(macan1bigram)));
                String[] macan3bigram = macan2bigram.split("\\s+");
                int macan4bigram  = macan3bigram.length; 
                String macan5bigram  = Integer.toString(macan4bigram);
                String kfmdbigram ="goodspeech";
                boolean lkmklbigram = kfmdbigram.contains(macan2bigram); 
                if(!lkmklbigram){
                    macan1.setText("Goodspeech Terdeteksi = " + macan5bigram);
                    tp1.setText("TP = " + macan5bigram);
                }else {
                    macan1.setText("Goodspeech Terdeteksi = 0");
                    tp1.setText("TP = 0");
                }
                 // HITUNG JUMLAH INPUT HATESPEECH
                String singa1bigram ="DATA_BIGRAM/hasil_bigram_hatespeech.txt"; 
                String singa2bigram = null; 
                singa2bigram = new String(Files.readAllBytes(Paths.get(singa1bigram)));
                String[] singa3bigram = singa2bigram.split("\\s+");
                int singa4bigram  = singa3bigram.length; 
                String singa5bigram  = Integer.toString(singa4bigram);
                String kfmdsingabigram ="hatespeech";
                boolean lkmklsingabigram = kfmdsingabigram.contains(singa2bigram); // jika pake ini maka akibatnya kata hatespeech tidak akan terdeteksi
                if(!lkmklsingabigram){
                    singa1.setText("Hatespeech Terdeteksi = " + singa5bigram);
                    tn1.setText("TN = " + singa5bigram);
                }else {
                    singa1.setText("Hatespeech Terdeteksi = 0");
                    tn1.setText("TN = 0");
                }
                double nbcgood1bigram = Barisjgoodbigram * macan4bigram;
                double nbcgood2bigram = data_goodhatebigram * Barisjgoodbigram;
                double nbcgood3bigram = nbcgood1bigram / nbcgood2bigram;
                String u_nbcgoodbigram = String.format("%.10f",nbcgood3bigram);
                if(!lkmklbigram){
                    totalgood1.setText("Hasil Goodspeech = " + jumlahBarisjgoodbigram +" "+"/"+" "+ jumlahdata_goodhatebigram +" "+"x"+" "+ macan5bigram +" "+"/"+" "+ jumlahBarisjgoodbigram );
                    hasil_ugood1.setText("="+" "+ u_nbcgoodbigram);
                }else {
                    totalgood1.setText("Hasil Goodspeech = ");
                    hasil_ugood1.setText("="+" " );
                }
                double nbchate1bigram = Barisjhatebigram * singa4bigram;
                double nbchate2bigram = data_goodhatebigram * Barisjhatebigram;
                double nbchate3bigram = nbchate1bigram / nbchate2bigram;
                String u_nbchatebigram = String.format("%.10f",nbchate3bigram);
                if(!lkmklsingabigram){
                    totalhate1.setText("Hasil Hatespeech = " + jumlahBarisjhatebigram +" "+"/"+" "+ jumlahdata_goodhatebigram +" "+"x"+" "+ singa5bigram +" "+"/"+" "+ jumlahBarisjhatebigram ); 
                    hasil_uhate1.setText("="+" "+ u_nbchatebigram);
                }else {
                    totalhate1.setText("Hasil Hatespeech = ");
                    hasil_uhate1.setText("="+" " );
                }

                    String cdbigram ="DATA_BIGRAM/hasil_bigram_awal.txt"; 
                    String cd2bigram = null; 
                    cd2bigram = new String(Files.readAllBytes(Paths.get(cdbigram)));
                    String[] cd3bigram = cd2bigram.split("\\s+");
                    int cd4bigram  = cd3bigram.length; 
                    String cd5bigram  = Integer.toString(cd4bigram);
                    int cd1bigram = 1;

                 // HASIL PERBANINGAN
                 if(nbcgood3bigram > nbchate3bigram) {
                    File dataindgoodbigram = new File("DATA_BIGRAM/hasil_bigram_akhir.txt"); 
                    PrintWriter prinddataindgoodbigram = new PrintWriter(new FileWriter(dataindgoodbigram, false)); 
                    prinddataindgoodbigram.println("Goodspeech");
                    prinddataindgoodbigram.close();  
                 } else if(nbchate3bigram > nbcgood3bigram) {
                    File dataindhatebigram = new File("DATA_BIGRAM/hasil_bigram_akhir.txt"); 
                    PrintWriter prinddataindhatebigram = new PrintWriter(new FileWriter(dataindhatebigram, false)); 
                    prinddataindhatebigram.println("Hatespeech");
                    prinddataindhatebigram.close();  
                 }else if(cd4bigram == cd1bigram){ // jika hanya 1 kata yg di input
                    String cd6bigram ="DATA_BIGRAM/hasil_bigram_awal.txt"; 
                    String cd7bigram = null; 
                    cd7bigram = new String(Files.readAllBytes(Paths.get(cd6bigram)));
                    File cd8bigram = new File("DATA_BIGRAM/hasil_bigram_akhir.txt"); 
                    PrintWriter cd9bigram = new PrintWriter(new FileWriter(cd8bigram, false)); 
                    cd9bigram.println(cd7bigram);
                    cd9bigram.close(); 
                 }else if(nbcgood3bigram == nbchate3bigram) { // jika hasil nya imbang
                    File dataindnobigram = new File("DATA_BIGRAM/hasil_bigram_akhir.txt"); 
                    PrintWriter prinddataindnobigram = new PrintWriter(new FileWriter(dataindnobigram, false)); 
                    prinddataindnobigram.println("Tidak ada hasil");
                    prinddataindnobigram.close();  
                 }
                 double b_g = nbcgood3bigram + nbchate3bigram;
                 File b_g_file = new File("DATA_BIGRAM/angka_bigram.txt"); 
                    PrintWriter pr_b_g = new PrintWriter(new FileWriter(b_g_file, false)); 
                    pr_b_g.println(b_g);
                    pr_b_g.close();  
                    //okbigram = new String(Files.readAllBytes(Paths.get(ojbigram)));
                    //akhir1.setText(okbigram);
            
                     String fp_lengthbigram ="DATA_BIGRAM/false_positif_bigram.txt"; 
                String cfp_lengthbigram= null; 
                cfp_lengthbigram = new String(Files.readAllBytes(Paths.get(fp_lengthbigram)));
                String kecil9_fp_lengthbigram = cfp_lengthbigram.toLowerCase(); 
                String[] fkal9_fp_lengthbigram = kecil9_fp_lengthbigram.split("\\s+");    
                String fn_lengthbigram ="DATA_BIGRAM/false_negatif_bigram.txt"; 
                String cfn_lengthbigram= null; 
                cfn_lengthbigram = new String(Files.readAllBytes(Paths.get(fn_lengthbigram)));
                String kecil9_fn_lengthbigram = cfn_lengthbigram.toLowerCase(); 
                String[] fkal9_fn_lengthbigram = kecil9_fn_lengthbigram.split("\\s+");
                
                        int zpsbigram = 0;
                        int B_fp_lengthbigram = fkal9_fp_lengthbigram.length; 
                        String j_fp_lengthbigram  = Integer.toString(B_fp_lengthbigram);
                        int ypsbigram = 0;
                        int B_fn_lengthbigram = fkal9_fn_lengthbigram.length; 
                        String j_fn_lengthbigram  = Integer.toString(B_fn_lengthbigram);
                        //fn1.setText("FN = " + j_fn_length);
                        
                    if(cfp_lengthbigram.equals("") || cfn_lengthbigram.equals("")){
                        fp2.setText("FP = " + zpsbigram);
                        fn2.setText("FN = " + zpsbigram);
                        double akurasi1bigram = macan4bigram + singa4bigram; 
                        double akurasi2bigram = macan4bigram + zpsbigram + zpsbigram + singa4bigram;
                        double akurasi3bigram = akurasi1bigram / akurasi2bigram;
                        double akurasi4bigram = akurasi3bigram * 100;
                        String akurasi5bigram = String.format("%.1f",akurasi4bigram);
                        Accuracy1.setText("Accuracy = " + "" +akurasi5bigram + "%");
                        double precission1bigram = macan4bigram + zpsbigram;
                        double precission2bigram = macan4bigram / precission1bigram;
                        double precission3bigram = precission2bigram * 100;
                        String precission4bigram = String.format("%.1f",precission3bigram);
                        Precision1.setText("Precission = " + "" + precission4bigram + "%");
                        double recall1bigram = macan4bigram + zpsbigram;
                        double recall2bigram = macan4bigram / recall1bigram;
                        double recall3bigram = recall2bigram * 100;
                        String recall4bigram = String.format("%.1f",recall3bigram);
                        Recall1.setText("Recall = " + "" + recall4bigram + "%");
                        double tprate1bigram = macan4bigram + zpsbigram;
                        double tprate2bigram = macan4bigram / tprate1bigram;
                        double tprate3bigram = tprate2bigram * 100;
                        String tprate4bigram = String.format("%.1f",tprate3bigram);
                        tprate1.setText("TP Rate = " + "" + tprate4bigram + "%");
                        double tnrate1bigram = singa4bigram + zpsbigram;
                        double tnrate2bigram = singa4bigram / tnrate1bigram;
                        double tnrate3bigram = tnrate2bigram * 100;
                        String tnrate4bigram = String.format("%.1f",tnrate3bigram);
                        tnrate1.setText("TN Rate= " + "" + tnrate4bigram + "%");
                            double hab01 = akurasi4bigram + precission3bigram + recall3bigram + tprate3bigram + tnrate3bigram;
                            File hab01_file = new File("DATA_BIGRAM/ratarata_bigram.txt"); 
                            PrintWriter pr_hab01 = new PrintWriter(new FileWriter(hab01_file, false)); 
                            pr_hab01.println(hab01);
                            pr_hab01.close(); 
                    }else{
                        fp2.setText("FP = " + j_fp_lengthbigram);
                        fn2.setText("FN = " + j_fn_lengthbigram);
                        double akurasi1bigram = macan4bigram + singa4bigram; 
                        double akurasi2bigram = macan4bigram + B_fp_lengthbigram + B_fn_lengthbigram + singa4bigram;
                        double akurasi3bigram = akurasi1bigram / akurasi2bigram;
                        double akurasi4bigram = akurasi3bigram * 100;
                        String akurasi5bigram = String.format("%.1f",akurasi4bigram);
                        Accuracy1.setText("Accuracy = " + "" +akurasi5bigram + "%");
                        double precission1bigram = macan4bigram + B_fp_lengthbigram;
                        double precission2bigram = macan4bigram / precission1bigram;
                        double precission3bigram = precission2bigram * 100;
                        String precission4bigram = String.format("%.1f",precission3bigram);
                        Precision1.setText("Precission = " + "" + precission4bigram + "%");
                        double recall1bigram = macan4bigram + B_fn_lengthbigram;
                        double recall2bigram = macan4bigram / recall1bigram;
                        double recall3bigram = recall2bigram * 100;
                        String recall4bigram = String.format("%.1f",recall3bigram);
                        Recall1.setText("Recall = " + "" + recall4bigram + "%");
                        double tprate1bigram = macan4bigram + B_fn_lengthbigram;
                        double tprate2bigram = macan4bigram / tprate1bigram;
                        double tprate3bigram = tprate2bigram * 100;
                        String tprate4bigram = String.format("%.1f",tprate3bigram);
                        tprate1.setText("TP Rate = " + "" + tprate4bigram + "%");
                        double tnrate1bigram = macan4bigram + B_fp_lengthbigram;
                        double tnrate2bigram = singa4bigram / tnrate1bigram;
                        double tnrate3bigram = tnrate2bigram * 100;
                        String tnrate4bigram = String.format("%.1f",tnrate3bigram);
                        tnrate1.setText("TN Rate= " + "" + tnrate4bigram + "%");
                            double hab01 = akurasi4bigram + precission3bigram + recall3bigram + tprate3bigram + tnrate3bigram;
                            File hab01_file = new File("DATA_BIGRAM/ratarata_bigram.txt"); 
                            PrintWriter pr_hab01 = new PrintWriter(new FileWriter(hab01_file, false)); 
                            pr_hab01.println(hab01);
                            pr_hab01.close();
                    }
                    
                    
                    
            }//if   bigram
            
            
            
            
            //dibandingkan dulu unigram / bigram
            //lalu dibandingkan lebih besar good / hate
                    String cdbigram_u_g ="DATA/ratarata_unigram.txt"; 
                    String cd2bigram_u_g = null; 
                    cd2bigram_u_g = new String(Files.readAllBytes(Paths.get(cdbigram_u_g)));
                    double u_po = Double.parseDouble(cd2bigram_u_g);
                    String cdbigram_u_g_u ="DATA/hasil_unigram_akhir.txt"; 
                    String cd2bigram_u_g_u = null; 
                    cd2bigram_u_g_u = new String(Files.readAllBytes(Paths.get(cdbigram_u_g_u)));
                    
                    String cdbigram_b_g ="DATA_BIGRAM/ratarata_bigram.txt"; 
                    String cd2bigram_b_g = null; 
                    cd2bigram_b_g = new String(Files.readAllBytes(Paths.get(cdbigram_b_g)));
                    double b_po = Double.parseDouble(cd2bigram_b_g);
                    String cdbigram_u_g_b ="DATA_BIGRAM/hasil_bigram_akhir.txt"; 
                    String cd2bigram_u_g_b = null; 
                    cd2bigram_u_g_b = new String(Files.readAllBytes(Paths.get(cdbigram_u_g_b)));
                    
           if(b_po >= u_po){
               akhir.setText(cd2bigram_u_g_b);
               pake2.setText(".");
               pake2.setVisible(true);
               pake1.setVisible(false);
           }else if(u_po >= b_po){
               akhir.setText(cd2bigram_u_g_u);
               pake1.setText(".");
               pake1.setVisible(true);
               pake2.setVisible(false);
           }else if(b_po == u_po){
               akhir.setText("Tidak ada hasilnya");
           }  
           
           
           // naive.setVisible(true);
           
        } catch (Exception e) {
        }      
        form_input.setVisible(true);
        tombol_simpan.setVisible(true);
        //akhir.setVisible(true);
        jSeparator1.setVisible(true);
        naive.setVisible(true);
        goods.setVisible(true);
        hates.setVisible(true);
        goodhates.setVisible(true);
        macan.setVisible(true);
        singa.setVisible(true);
        totalgood.setVisible(true);
        hasil_ugood.setVisible(true);
        totalhate.setVisible(true);
        hasil_uhate.setVisible(true);
        
        fp1.setVisible(false);
        fn1.setVisible(false);
        tp.setVisible(false);
        tn.setVisible(false);
        Accuracy.setVisible(false);
        Precision.setVisible(false);
        Recall.setVisible(false);
        tprate.setVisible(false);
        tnrate.setVisible(false);
        
        fp2.setVisible(false);
        fn2.setVisible(false);
        tp1.setVisible(false);
        tn1.setVisible(false);
        Accuracy1.setVisible(false);
        Precision1.setVisible(false);
        Recall1.setVisible(false);
        tprate1.setVisible(false);
        tnrate1.setVisible(false);
    }//GEN-LAST:event_tombol_simpanActionPerformed

    private void analisis1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_analisis1MouseClicked
        // TODO add your handling code here:
        form_input.setVisible(true);
        tombol_simpan.setVisible(true);
        akhir.setVisible(true);
        jSeparator1.setVisible(true);
        naive.setVisible(true);
        goods.setVisible(true);
        hates.setVisible(true);
        goodhates.setVisible(true);
        macan.setVisible(true);
        singa.setVisible(true);
        totalgood.setVisible(true);
        hasil_ugood.setVisible(true);
        totalhate.setVisible(true);
        hasil_uhate.setVisible(true);
       
        fp1.setVisible(false);
        fn1.setVisible(false);
        tp.setVisible(false);
        tn.setVisible(false);
        Accuracy.setVisible(false);
        Precision.setVisible(false);
        Recall.setVisible(false);
        tprate.setVisible(false);
        tnrate.setVisible(false);
        
        fp2.setVisible(false);
        fn2.setVisible(false);
        tp1.setVisible(false);
        tn1.setVisible(false);
        Accuracy1.setVisible(false);
        Precision1.setVisible(false);
        Recall1.setVisible(false);
        tprate1.setVisible(false);
        tnrate1.setVisible(false);
    }//GEN-LAST:event_analisis1MouseClicked

    private void nbcMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nbcMouseClicked
        // TODO add your handling code here:
        //Accuracy.setText(ok);
        //Precision.setText(ok);
        //Recall.setText(ok);
        //tprate.setText(ok);
        //tnrate.setText(ok);
        
        form_input.setVisible(false);
        tombol_simpan.setVisible(false);
        akhir.setVisible(false);
        jSeparator1.setVisible(false);
        naive.setVisible(false);
        goods.setVisible(true);
        hates.setVisible(true);
        goodhates.setVisible(true);
        macan.setVisible(true);
        singa.setVisible(true);
        totalgood.setVisible(true);
        hasil_ugood.setVisible(true);
        totalhate.setVisible(true);
        hasil_uhate.setVisible(true);
        
        fp1.setVisible(true);
        fn1.setVisible(true);
        tp.setVisible(true);
        tn.setVisible(true);
        Accuracy.setVisible(true);
        Precision.setVisible(true);
        Recall.setVisible(true);
        tprate.setVisible(true);
        tnrate.setVisible(true);
        
        fp2.setVisible(true);
        fn2.setVisible(true);
        tp1.setVisible(true);
        tn1.setVisible(true);
        Accuracy1.setVisible(true);
        Precision1.setVisible(true);
        Recall1.setVisible(true);
        tprate1.setVisible(true);
        tnrate1.setVisible(true);
    }//GEN-LAST:event_nbcMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".contains(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(a.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(a.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(a.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(a.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold> 
        
        String data_mentah ="DATA/data_goodspeech.txt"; 
	String data_mentahhate ="DATA/data_hatespeech.txt"; 
	String stopword_list_tala ="DATA/stopwocrd_list_tala.txt"; 
	String cdata_mentah= null; 
	String cdata_mentahhate= null; 
	String cstopword_list_tala= null; 
	String nanas_mentah= null; 
        
	String tala ="DATA/stopword_list_tala.txt"; 
	String ctala= null; 
        try {
            File inputkosong = new File("DATA/input.txt"); 
            PrintWriter pkalnullkosong = new PrintWriter(new FileWriter(inputkosong, false));
            pkalnullkosong.println();
            
            //  UNIGRAM - PREPROCESSING - NAIVE BAYES
            
            File unigram_awal = new File("DATA/hasil_unigram_awal.txt"); 
            PrintWriter prosesnullunigram_awal = new PrintWriter(new FileWriter(unigram_awal, false));
            prosesnullunigram_awal.println();
            
         // GOOD-SPEECH men set file input menjadi kosong 1
            File inputnull_good = new File("DATA/unigram_goodspeech.txt"); 
            PrintWriter pkalnull_good = new PrintWriter(new FileWriter(inputnull_good, false)); 
            pkalnull_good.println(); //print data
            File inputnull = new File("DATA/unigram_goodspeech_tanpa_contains.txt"); 
            PrintWriter pkalnull = new PrintWriter(new FileWriter(inputnull, false)); 
            pkalnull.println(); //print data
            cdata_mentah = new String(Files.readAllBytes(Paths.get(data_mentah))); 
            String kecili = cdata_mentah.toLowerCase(); 
            String simbol = kecili.replaceAll("[^\\p{L}\\s]", "");  //  \\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}
            String[] fkal = simbol.split("\\s+"); 
            ctala = new String(Files.readAllBytes(Paths.get(tala)));
            for(String hukal : fkal) { 
               boolean ikan = ctala.contains(hukal); 
               if (!ikan){ 
                File dataindonesia = new File("DATA/unigram_goodspeech_tanpa_contains.txt"); 
                PrintWriter prindonesia = new PrintWriter(new FileWriter(dataindonesia, true)); 
                prindonesia.println(hukal); 
                prindonesia.close();
                    //nanti hapus
                    //File ugood1 = new File("DATA/unigram_goodspeech.txt"); 
                    //PrintWriter prugood1 = new PrintWriter(new FileWriter(ugood1, true)); 
                    //prugood1.println(hukal); 
                    //prugood1.close();
                }//if
            }//for
            
            
 ////////////////////////////////////////////////////////////////////////////////////           
            // HATE-SPEECH men set file input menjadi kosong
            File inputnull_hate = new File("DATA/unigram_hatespeech.txt"); 
            PrintWriter pkalnull_hate = new PrintWriter(new FileWriter(inputnull_hate, false)); 
            pkalnull_hate.println(); //print data
            File inputnullhate = new File("DATA/unigram_hatespeech_tanpa_contains.txt"); 
            PrintWriter pkalnullhate = new PrintWriter(new FileWriter(inputnullhate, false)); 
            pkalnullhate.println(); //print data
            cdata_mentahhate = new String(Files.readAllBytes(Paths.get(data_mentahhate))); 
            String kecilihate = cdata_mentahhate.toLowerCase(); 
            String simbolhate = kecilihate.replaceAll("[^\\p{L}\\s]", "");  //  \\p{M}\\p{N}\\p{P}\\p{Z}\\p{Cf}\\p{Cs}
            String[] fkalhate = simbolhate.split("\\s+"); 
            //cstopword_list_tala = new String(Files.readAllBytes(Paths.get(stopword_list_tala)));
            ctala = new String(Files.readAllBytes(Paths.get(tala)));
            for(String hukalhate : fkalhate) { 
               boolean ikanhate = ctala.contains(hukalhate); 
                if (!ikanhate){ 
                    File datahate = new File("DATA/unigram_hatespeech_tanpa_contains.txt"); 
                    PrintWriter prhate = new PrintWriter(new FileWriter(datahate, true)); 
                    prhate.println(hukalhate); 
                    prhate.close(); 
                    //nanti hapus
                    //File uhate1 = new File("DATA/unigram_hatespeech.txt"); 
                    //PrintWriter pruhate1 = new PrintWriter(new FileWriter(uhate1, true)); 
                    //pruhate1.println(hukalhate); 
                    //pruhate1.close();
                }
            }
            
            //  MENGHAPUS DATA YANG SAMA ANTARA 
            //  unigram_goodspeech_tanpa_contains.txt DENGAN unigram_hatespeech_tanpa_contains.txt
            // ini yg membuat akurasi menjadi 100 persen
            
            String z ="DATA/unigram_goodspeech_tanpa_contains.txt"; 
            String za= null; 
            za = new String(Files.readAllBytes(Paths.get(z)));
            String[] zaqbawah = za.split("\\s+"); // bawah
            String[] zaq = za.split("\\s+", 1); // datar
            
            String x ="DATA/unigram_hatespeech_tanpa_contains.txt"; 
            String xs= null; 
            xs = new String(Files.readAllBytes(Paths.get(x)));
            String[] xswbawah = xs.split("\\s+"); // bawah
            String[] xsw = xs.split("\\s+", 1);//datar
                     
            //  goodspeech contains hatespeech = goospeech
            //yg dipake yg false
            File bakarnul = new File("DATA/unigram_goodspeech.txt"); 
            PrintWriter pkabakarnul = new PrintWriter(new FileWriter(bakarnul, false)); 
            pkabakarnul.println(); 
            for(String siputgood : zaqbawah) {   // string : split
          //  boolean siputbakar = xs.contains(siputgood);   // bawah contains datar
            //    if(!siputbakar){
                    File zaq1 = new File("DATA/unigram_goodspeech.txt"); 
                    PrintWriter zaq10 = new PrintWriter(new FileWriter(zaq1, true)); 
                    zaq10.println(siputgood); 
                    zaq10.close();
              //  }//if
            }//for
            //hatespeech contains goodspeech = hatespeech
            //yg dipake yg false
            File gorengnul = new File("DATA/unigram_hatespeech.txt"); 
            PrintWriter pkagorengnul = new PrintWriter(new FileWriter(gorengnul, false)); 
            pkagorengnul.println();
            for(String siputhate : xswbawah) {   // string : split
            //boolean siputgoreng = za.contains(siputhate);   // bawah contains datar
              //  if(!siputgoreng){
                    File xsw1 = new File("DATA/unigram_hatespeech.txt"); 
                    PrintWriter xsw10 = new PrintWriter(new FileWriter(xsw1, true)); 
                    xsw10.println(siputhate); 
                    xsw10.close();
               // }//if
            }//for
            
            
            
            
            
            
            
            
            
            
            
/////////////////////////////////////////////////////////
                //  BIGRAM
            File b0inull = new File("DATA_BIGRAM/bigram_goodspeech_0.txt"); 
            PrintWriter p0binull = new PrintWriter(new FileWriter(b0inull, false)); 
            p0binull.println();
            File binull = new File("DATA_BIGRAM/bigram_goodspeech_1.txt"); 
            PrintWriter pbinull = new PrintWriter(new FileWriter(binull, false)); 
            pbinull.println();
            File bbinull02 = new File("DATA_BIGRAM/bigram_goodspeech_2.txt"); 
            PrintWriter bpbinull02 = new PrintWriter(new FileWriter(bbinull02, false)); 
            bpbinull02.println();
            File bbinull0 = new File("DATA_BIGRAM/bigram_goodspeech_3.txt"); 
            PrintWriter bpbinull0 = new PrintWriter(new FileWriter(bbinull0, false)); 
            bpbinull0.println();
            File bbinull = new File("DATA_BIGRAM/bigram_goodspeech_4.txt"); 
            PrintWriter bpbinull = new PrintWriter(new FileWriter(bbinull, false)); 
            bpbinull.println();
            File bbinull05 = new File("DATA_BIGRAM/bigram_goodspeech.txt"); 
            PrintWriter bpbinull05 = new PrintWriter(new FileWriter(bbinull05, false)); 
            bpbinull05.println();
            
            String be ="DATA/unigram_goodspeech.txt"; 
            String bes= null; 
            bes = new String(Files.readAllBytes(Paths.get(be)));
            String[] bibawah = bes.split("\\s+"); // bawah
            
            //1
            BufferedReader reader1 = new BufferedReader(new FileReader("DATA/unigram_goodspeech.txt"));
            String satu = reader1.readLine();
            File bi00 = new File("DATA_BIGRAM/bigram_goodspeech_1.txt"); 
            PrintWriter pbi00 = new PrintWriter(new FileWriter(bi00, true)); 
            pbi00.println(satu);
            pbi00.close();
            
            //2
            String be1 ="DATA_BIGRAM/bigram_goodspeech_1.txt"; 
            String bes1= null; 
            bes1 = new String(Files.readAllBytes(Paths.get(be1)));
            for(String yab : bibawah){
                boolean ajax = bes1.contains(yab);
                if(!ajax){
                    File bi0 = new File("DATA_BIGRAM/bigram_goodspeech_2.txt"); 
                    PrintWriter pbi0 = new PrintWriter(new FileWriter(bi0, true)); 
                    pbi0.println(yab);
                    pbi0.close();
                }
            }
            
            //3
            String be12 ="DATA_BIGRAM/bigram_goodspeech_2.txt"; 
            String bes12= null; 
            bes12 = new String(Files.readAllBytes(Paths.get(be12)));
            String[] besbawah2 = bes12.split("\\s+"); // bawah
            for(String bigood2 : besbawah2) {
                        File bi2 = new File("DATA_BIGRAM/bigram_goodspeech_3.txt"); 
                        PrintWriter pbi2 = new PrintWriter(new FileWriter(bi2, true)); 
                        pbi2.println(bigood2);
                        pbi2.println(bigood2);
                        pbi2.close();
            }
            
            //4
            String be124 ="DATA_BIGRAM/bigram_goodspeech_1.txt"; 
            String bes124= null; 
            bes124 = new String(Files.readAllBytes(Paths.get(be124)));
            String be1243 ="DATA_BIGRAM/bigram_goodspeech_3.txt"; 
            String bes1243= null; 
            bes1243 = new String(Files.readAllBytes(Paths.get(be1243)));
            File bi004 = new File("DATA_BIGRAM/bigram_goodspeech_4.txt"); 
            PrintWriter pbi004 = new PrintWriter(new FileWriter(bi004, true)); 
            pbi004.print(bes124);
            pbi004.println(bes1243);
            pbi004.close();
            
            //5
            BufferedReader reader = new BufferedReader(new FileReader("DATA_BIGRAM/bigram_goodspeech_4.txt"));
            String currentLine;
            String[] a;
            String[] b;
            //String res;
            while((currentLine = reader.readLine()) != null) {
                a = currentLine.split(",");
                b = reader.readLine().split(",");
                //res = a[0] + " " + b[0];
                //res = a[0] + " " + b[0] + "\n";
                //writer.write(res);
                File bi2 = new File("DATA_BIGRAM/bigram_goodspeech.txt"); 
                PrintWriter pbi2 = new PrintWriter(new FileWriter(bi2, true)); 
               // pbi2.println(a[0] + " " + b[0]); //digabung tanpa spasi
                pbi2.println(a[0] + b[0]);
                pbi2.close();
                File b0i2 = new File("DATA_BIGRAM/bigram_goodspeech_0.txt"); 
                PrintWriter p0bi2 = new PrintWriter(new FileWriter(b0i2, true)); 
                pbi2.println(a[0] + " " + b[0]);
                pbi2.close();
            }//while
            
            
            File b0inullhate = new File("DATA_BIGRAM/bigram_hatespeech_0.txt"); 
            PrintWriter p0binullhate = new PrintWriter(new FileWriter(b0inullhate, false)); 
            p0binullhate.println();
            File binullhate = new File("DATA_BIGRAM/bigram_hatespeech_1.txt"); 
            PrintWriter pbinullhate = new PrintWriter(new FileWriter(binullhate, false)); 
            pbinullhate.println();
            File bbinull02hate = new File("DATA_BIGRAM/bigram_hatespeech_2.txt"); 
            PrintWriter bpbinull02hate = new PrintWriter(new FileWriter(bbinull02hate, false)); 
            bpbinull02hate.println();
            File bbinull0hate = new File("DATA_BIGRAM/bigram_hatespeech_3.txt"); 
            PrintWriter bpbinull0hate = new PrintWriter(new FileWriter(bbinull0hate, false)); 
            bpbinull0hate.println();
            File bbinullhate = new File("DATA_BIGRAM/bigram_hatespeech_4.txt"); 
            PrintWriter bpbinullhate = new PrintWriter(new FileWriter(bbinullhate, false)); 
            bpbinullhate.println();
            File bbinull05hate = new File("DATA_BIGRAM/bigram_hatespeech.txt"); 
            PrintWriter bpbinull05hate = new PrintWriter(new FileWriter(bbinull05hate, false)); 
            bpbinull05hate.println();
            
            String behate ="DATA/unigram_hatespeech.txt"; 
            String beshate= null; 
            beshate = new String(Files.readAllBytes(Paths.get(behate)));
            String[] bibawahhate = beshate.split("\\s+"); // bawah
            
            //1
            BufferedReader reader1hate = new BufferedReader(new FileReader("DATA/unigram_hatespeech.txt"));
            String satuhate = reader1hate.readLine();
            File bi00hate = new File("DATA_BIGRAM/bigram_hatespeech_1.txt"); 
            PrintWriter pbi00hate = new PrintWriter(new FileWriter(bi00hate, true)); 
            pbi00hate.println(satuhate);
            pbi00hate.close();
            
            //2
            String be1hate ="DATA_BIGRAM/bigram_hatespeech_1.txt"; 
            String bes1hate= null; 
            bes1hate = new String(Files.readAllBytes(Paths.get(be1hate)));
            for(String yabhate : bibawahhate){
                boolean ajaxhate = bes1hate.contains(yabhate);
                if(!ajaxhate){
                    File bi0hate = new File("DATA_BIGRAM/bigram_hatespeech_2.txt"); 
                    PrintWriter pbi0hate = new PrintWriter(new FileWriter(bi0hate, true)); 
                    pbi0hate.println(yabhate);
                    pbi0hate.close();
                }
            }
            
            //3
            String be12hate ="DATA_BIGRAM/bigram_hatespeech_2.txt"; 
            String bes12hate= null; 
            bes12hate = new String(Files.readAllBytes(Paths.get(be12hate)));
            String[] besbawah2hate = bes12hate.split("\\s+"); // bawah
            for(String bigood2hate : besbawah2hate) {
                        File bi2hate = new File("DATA_BIGRAM/bigram_hatespeech_3.txt"); 
                        PrintWriter pbi2hate = new PrintWriter(new FileWriter(bi2hate, true)); 
                        pbi2hate.println(bigood2hate);
                        pbi2hate.println(bigood2hate);
                        pbi2hate.close();
            }
            
            //4
            String be124hate ="DATA_BIGRAM/bigram_hatespeech_1.txt"; 
            String bes124hate= null; 
            bes124hate = new String(Files.readAllBytes(Paths.get(be124hate)));
            String be1243hate ="DATA_BIGRAM/bigram_hatespeech_3.txt"; 
            String bes1243hate= null; 
            bes1243hate = new String(Files.readAllBytes(Paths.get(be1243hate)));
            File bi004hate = new File("DATA_BIGRAM/bigram_hatespeech_4.txt"); 
            PrintWriter pbi004hate = new PrintWriter(new FileWriter(bi004hate, true)); 
            pbi004hate.print(bes124hate);
            pbi004hate.println(bes1243hate);
            pbi004hate.close();
            
            //5
            BufferedReader readerhate = new BufferedReader(new FileReader("DATA_BIGRAM/bigram_hatespeech_4.txt"));
            String currentLinehate;
            String[] ahate;
            String[] bhate;
            //String res;
            while((currentLinehate = readerhate.readLine()) != null) {
                ahate = currentLinehate.split(",");
                bhate = readerhate.readLine().split(",");
                //res = a[0] + " " + b[0];
                //res = a[0] + " " + b[0] + "\n";
                //writer.write(res);
                File bi2hate = new File("DATA_BIGRAM/bigram_hatespeech.txt"); 
                PrintWriter pbi2hate = new PrintWriter(new FileWriter(bi2hate, true)); 
                //pbi2hate.println(ahate[0] + " " + bhate[0]);  //digabung tanoa spasi
                pbi2hate.println(ahate[0] + bhate[0]);
                pbi2hate.close();
                File b0i2hate = new File("DATA_BIGRAM/bigram_hatespeech_0.txt"); 
                PrintWriter p0bi2hate = new PrintWriter(new FileWriter(b0i2hate, true)); 
                p0bi2hate.println(ahate[0] + " " + bhate[0]);  
                pbi2hate.close();
            }//while
            
                

        } catch (IOException ex) {
            Logger.getLogger(a.class.getName()).log(Level.SEVERE, null, ex);
        }
	
       
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new a().setVisible(true);
                //form_kesimpulan.setVisible(false);
                unigram.setVisible(false);
                naive.setVisible(false);
                bigram.setVisible(false);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Accuracy;
    private javax.swing.JLabel Accuracy1;
    private javax.swing.JLabel Precision;
    private javax.swing.JLabel Precision1;
    private javax.swing.JLabel Recall;
    private javax.swing.JLabel Recall1;
    private javax.swing.JLabel akhir;
    private javax.swing.JLabel analisis1;
    private static javax.swing.JLabel bigram;
    private javax.swing.JLabel fn1;
    private javax.swing.JLabel fn2;
    private static javax.swing.JTextField form_input;
    private javax.swing.JLabel fp1;
    private javax.swing.JLabel fp2;
    private javax.swing.JLabel goodhates;
    private javax.swing.JLabel goodhates1;
    private javax.swing.JLabel goods;
    private javax.swing.JLabel goods1;
    private javax.swing.JLabel hasil_ugood;
    private javax.swing.JLabel hasil_ugood1;
    private javax.swing.JLabel hasil_uhate;
    private javax.swing.JLabel hasil_uhate1;
    private javax.swing.JLabel hates;
    private javax.swing.JLabel hates1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel judul;
    private javax.swing.JLabel macan;
    private javax.swing.JLabel macan1;
    private static javax.swing.JLabel naive;
    private javax.swing.JPanel navbar;
    private javax.swing.JLabel nbc;
    private javax.swing.JLabel pake1;
    private javax.swing.JLabel pake2;
    private javax.swing.JPanel sidebar;
    private javax.swing.JLabel singa;
    private javax.swing.JLabel singa1;
    private javax.swing.JLabel tn;
    private javax.swing.JLabel tn1;
    private javax.swing.JLabel tnrate;
    private javax.swing.JLabel tnrate1;
    private static javax.swing.JButton tombol_simpan;
    private javax.swing.JLabel totalgood;
    private javax.swing.JLabel totalgood1;
    private javax.swing.JLabel totalhate;
    private javax.swing.JLabel totalhate1;
    private javax.swing.JLabel tp;
    private javax.swing.JLabel tp1;
    private javax.swing.JLabel tprate;
    private javax.swing.JLabel tprate1;
    private static javax.swing.JLabel unigram;
    // End of variables declaration//GEN-END:variables
}
